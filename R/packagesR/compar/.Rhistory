setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/math/complement en tests statistiques")
install.packages("rmdformats")
install.packages('tinytex')
tinytex::pdflatex('tp1v3.tex')
tinytex::install_tinytex()
tinytex::pdflatex('tp1v3.tex')
tinytex::tlmgr_install("tcolorbox")
tinytex::tlmgr_install("tcolorbox")
tinytex::tlmgr_install("pgf")
tinytex::pdflatex('tp1v3.tex')
tinytex::tlmgr_install("tcolorbox")
N = seq(10,10000,100)
M = 1000
c = 1/2
a = 0
th = 1
res = matrix(ncol = length(N), nrow = M)
idx = 1
for(n in N){
X = replicate(M,rweibull(n,shape = c,scale = th^(1/c)))
estMV = apply(X,2,function(X){(1/n)*sum((X - a)^c)})
res[,idx] = estMV
idx = idx + 1
}
n = 500
rep = 100 # Nombre de boucles
alpha = 0.05
c = 1/2
a = 0
th = 1
res_norm = matrix(ncol = 2, nrow = rep)
res_chi = matrix(ncol = 2, nrow = rep)
for(i in 1:rep){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n), est+est*qnorm(1-alpha/2)/sqrt(n))
res_norm[i,] = IC_norm
res_chi[i,] = IC_chi
}
plot(1:rep,res_norm[,1],
col="#E41A1C",pch=16,
ylim = c(min(res_norm[,1],res_norm[,2]),
max(res_norm[,1],res_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee",
xlab = "Nombre de repetitions",
ylab = "Niveau d'interval")
points(1:rep, res_norm[,2], col="#377EB8",pch=16)
points(1:rep, res_chi[,1], col="#4DAF4A",pch=19)
points(1:rep, res_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C",
"#377EB8",
"#4DAF4A",
"#FF7F00"),pch = c(16,16,19,19),
cex = 0.7)
legend("topleft",
c(paste("Interval de loi approchée:",100*sum((res_norm[,1] < th & res_norm[,2] > th))/rep,"%"),
paste("Interval de loi exacte:",100*sum((res_chi[,1] < th & res_chi[,2] > th))/rep,"%")),
cex = 0.7,
title = "Contient la vraie valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
N = seq(10,1000,5)
alpha = 0.05
c = 1/2
a = 0
th = 1
res2_norm = matrix(ncol = 2, nrow = length(N))
res2_chi = matrix(ncol = 2, nrow = length(N))
idx = 1
for(n in N){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n),est+est*qnorm(1-alpha/2)/sqrt(n))
res2_norm[idx,] = IC_norm
res2_chi[idx,] = IC_chi
idx = idx + 1
}
plot(N,res2_norm[,1],
col="#E41A1C",pch = 16,
ylim = c(min(res2_norm[,1],res2_norm[,2]), max(res2_norm[,1],res2_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee\nen fonction de n",
xlab = "n",
ylab = "Niveau d'interval")
points(N, res2_norm[,2], col="#377EB8",pch=16)
points(N, res2_chi[,1], col="#4DAF4A",pch=19)
points(N, res2_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C", "#377EB8", "#4DAF4A", "#FF7F00"),pch=c(16,16,19,19),
cex = 0.7)
legend("bottomright",
c(paste("Intervalle de loi approchée:",round(100*sum((res2_norm[,1] < th & res2_norm[,2] > th))/length(N),2),"%"),
paste("Intervalle de loi exacte:",round(100*sum((res2_chi[,1] < th & res2_chi[,2] > th))/length(N), 2),"%")),
cex = 0.7,
title = "Contient la vrai valeur")
n = 500
rep = 100 # Nombre de boucles
alpha = 0.05
c = 1/2
a = 0
th = 1
res_norm = matrix(ncol = 2, nrow = rep)
res_chi = matrix(ncol = 2, nrow = rep)
for(i in 1:rep){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n), est+est*qnorm(1-alpha/2)/sqrt(n))
res_norm[i,] = IC_norm
res_chi[i,] = IC_chi
}
plot(1:rep,res_norm[,1],
col="#E41A1C",pch=16,
ylim = c(min(res_norm[,1],res_norm[,2]),
max(res_norm[,1],res_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee",
xlab = "Nombre de repetitions",
ylab = "Niveau d'interval")
points(1:rep, res_norm[,2], col="#377EB8",pch=16)
points(1:rep, res_chi[,1], col="#4DAF4A",pch=19)
points(1:rep, res_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C",
"#377EB8",
"#4DAF4A",
"#FF7F00"),pch = c(16,16,19,19),
cex = 0.7)
legend("topleft",
c(paste("Interval de loi approchée:",100*sum((res_norm[,1] < th & res_norm[,2] > th))/rep,"%"),
paste("Interval de loi exacte:",100*sum((res_chi[,1] < th & res_chi[,2] > th))/rep,"%")),
cex = 0.7,
title = "Contient la vraie valeur")
n = 500
rep = 100 # Nombre de boucles
alpha = 0.05
c = 1/2
a = 0
th = 1
res_norm = matrix(ncol = 2, nrow = rep)
res_chi = matrix(ncol = 2, nrow = rep)
for(i in 1:rep){
X = rweibull(n,shape = c,scale = th^(1/c))
est = (1/n)*sum((X - a)^c)
IC_chi = c(est*2*n/qchisq(1-alpha/2,2*n), est*2*n/qchisq(alpha/2,2*n))
IC_norm = c(est-est*qnorm(1-alpha/2)/sqrt(n), est+est*qnorm(1-alpha/2)/sqrt(n))
res_norm[i,] = IC_norm
res_chi[i,] = IC_chi
}
plot(1:rep,res_norm[,1],
col="#E41A1C",pch=16,
ylim = c(min(res_norm[,1],res_norm[,2]),
max(res_norm[,1],res_norm[,2])),
main = "Niveau de confiance des intervalles de loi exacte et loi approchee",
xlab = "Nombre de repetitions",
ylab = "Niveau d'interval")
points(1:rep, res_norm[,2], col="#377EB8",pch=16)
points(1:rep, res_chi[,1], col="#4DAF4A",pch=19)
points(1:rep, res_chi[,2], col="#FF7F00",pch=19)
abline(h=th, col="red")
legend("topright",
c("IC sup Normal", "IC inf Normal", "IC sup chi2", "IC inf chi2"),
col = c("#E41A1C",
"#377EB8",
"#4DAF4A",
"#FF7F00"),pch = c(16,16,19,19),
cex = 0.7)
legend("topleft",
c(paste("Interval de loi approchée:",100*sum((res_norm[,1] < th & res_norm[,2] > th))/rep,"%"),
paste("Interval de loi exacte:",100*sum((res_chi[,1] < th & res_chi[,2] > th))/rep,"%")),
cex = 0.7,
title = "Contient la vraie valeur")
puissance <-function(th_1,th_0=1,alpha=0.05,n=100){
1-pchisq(qchisq(1-alpha,2*n)*th_0/th_1,df=2*n)
}
theta_values <- seq(1, 2, by = 0.01)
alpha_values <- c(0.1,0.05, 0.01, 0.001)
data <- expand.grid(theta1 = theta_values, alpha = alpha_values)
data$power <- Vectorize(function(th_1, alpha) puissance(th_1, alpha = alpha))(data$theta1, data$alpha)
# Création du graphique avec ggplot2
ggplot(data, aes(x = theta1, y = power, color = as.factor(alpha))) +
geom_line() +
labs(x = expression(theta[1]), y = "Puissance", title = "Fonction de puissance du test", color = expression(alpha))
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=TRUE,warning=FALSE,message = FALSE)
library(ggplot2)
puissance <-function(th_1,th_0=1,alpha=0.05,n=100){
1-pchisq(qchisq(1-alpha,2*n)*th_0/th_1,df=2*n)
}
theta_values <- seq(1, 2, by = 0.01)
alpha_values <- c(0.1,0.05, 0.01, 0.001)
data <- expand.grid(theta1 = theta_values, alpha = alpha_values)
data$power <- Vectorize(function(th_1, alpha) puissance(th_1, alpha = alpha))(data$theta1, data$alpha)
# Création du graphique avec ggplot2
ggplot(data, aes(x = theta1, y = power, color = as.factor(alpha))) +
geom_line() +
labs(x = expression(theta[1]), y = "Puissance", title = "Fonction de puissance du test", color = expression(alpha))
data(crabs)
kable(head(crabs))
box <-ggboxplot(crabs,x="sex",y="RW",add = "jitter",color="sex")
knitr::opts_chunk$set(collapse=TRUE, comment = "#>", fig.width=9, fig.height=6, eval=TRUE, echo=TRUE,warning=FALSE,message = FALSE)
library(MASS)
library(ggplot2)
library(ggridges)
library(kableExtra)
library(ggpubr)
library(exactRankTests)
data(crabs)
kable(head(crabs))
box <-ggboxplot(crabs,x="sex",y="RW",add = "jitter",color="sex")
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",color="sex")
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",color="sp")
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",fill="sp")
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",fill="sp",palette=c("steelblue","darkorange"))
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",color="sp",palette=c("steelblue","darkorange"))
box
box <-ggboxplot(crabs,x="sp",y="RW",add = "jitter",fill="sp",palette=c("steelblue","darkorange"))
box
box <-ggboxplot(crabs,x="sex",y="RW",add = "jitter",fill="sex")
box
wilcox.test(crabs$RW,crabs$sp)
wilcox.test(crabs$RW~crabs$sp)
test_exact <- wilcox.exact(crabs$RW~crabs$sp)
test_exact
wilcox.test(crabs$RW~crabs$sp)
test <- wilcox.test(crabs$RW~crabs$sp)
test$statistique
test$statistic
test$statistic
length(crabs$RW)
length(crabs$sp)
test$statistic
test$statistic-200*401
test$statistic-200*401/2
(test$statistic-200*401)/2
numerateur=(test$statistic-200*401)/2
denominateur= sqrt((200*200*401)/12)
numerateur/denominateur
test
wilcox.test(crabs$RW~crabs$sp)
U=numerateur/denominateur
qnorm(U)
pnorm(U)
U
pnorm(1.96)
pnorm(1.6455)
2*(1-pnorm(1.96))
2*(1-pnorm(U))
2*(1-pnorm(-1.96))
2*(1-pnorm(abs(U)))
#plot(density(crabs[crabs$sex=="F",]$RW),main="densité de la carapace arrière",ylim=c(0,0.2))
#lines(density(crabs[crabs$sex=="M",]$RW),col="red")
#legend("topright",legend = c("Femelle","Male"),fill=c("black","red"),cex=0.8)
ggplot(crabs, aes(x = RW,y= sex, fill = sex)) +
geom_density_ridges() +
labs(
title= "Densité de la carapace arrière "
)
#plot(density(crabs[crabs$sex=="F",]$RW),main="densité de la carapace arrière",ylim=c(0,0.2))
#lines(density(crabs[crabs$sex=="M",]$RW),col="red")
#legend("topright",legend = c("Femelle","Male"),fill=c("black","red"),cex=0.8)
ggplot(crabs, aes(x = RW,y= sex, fill = sex)) +
geom_density_ridges() +
labs(
title= "Densité de la carapace arrière ",
x= "Taille de la carapace arrière (mm)"
)
box+
labs(
y = "taille de la carapace arrière (mm)"
)
box+
labs(
y = "Taille de la carapace (mm)"
)
box+
labs(
y = "Taille de la carapace (mm)"
)
ggplot(crabs, aes(x = RW, y = sp, fill = sp)) +
geom_density_ridges() +
scale_fill_manual(values = c("steelblue", "darkorange")) +
labs(
x = "Taille de la carapace arrière (mm)"
title = "Densité de la carapace arrière",
ggplot(crabs, aes(x = RW, y = sp, fill = sp)) +
geom_density_ridges() +
scale_fill_manual(values = c("steelblue", "darkorange")) +
labs(
x = "Taille de la carapace arrière (mm)",
title = "Densité de la carapace arrière",
fill = "Espèce"
)
ggplot(crabs, aes(x = RW, y = sp, fill = sp)) +
geom_density_ridges() +
scale_fill_manual(values = c("steelblue", "darkorange")) +
labs(
x = "Taille de la carapace arrière (mm)",
y = "Espèce de crabe",
title = "Densité de la carapace arrière",
fill = "Espèce"
)
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/math/complement en tests statistiques")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/quarto")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/math/complement en tests statistiques")
test<- t.test(crabs$RW~crabs$sex)
IC=test$conf.int
IC
IC[[1]]
round(IC[[1]],2)
box <-ggboxplot(crabs,x="sexe",y="RW",add = "jitter",fill="sex")
box <-ggboxplot(crabs,x="sex",y="RW",add = "jitter",fill="sex")
box <-ggboxplot(crabs,x="sex",y="RW",add = "jitter",fill="sex")
box+
labs(
y = "Taille de la carapace (mm)"
)
test <- wilcox.test(crabs$RW~crabs$sex)
test_exact <- wilcox.exact(crabs$RW~crabs$sex)
test_exact
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1")
