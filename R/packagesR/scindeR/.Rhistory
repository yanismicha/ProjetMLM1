install.packages("Rtools")
1+1
c(2,3)
c(2,3).append(4)
append
append(c(2,3),4)
iris
names(iris)
quanti <- c("Sepal.Length","Sepal.Width")
quanti
iris[,quanti]
source("~/yanis/cours/Master ssd/M1/Semestre 1/separ/R/data.R")
names(iris)
typeof(Species)
typeof(iris$Species)
iris$Species
typeof(iris$Species)
typeof(iris)
typeof(iris$Sepal.Length)
typeof(iris$Species)
airquality
ozone
AirPassengers
iris
is.numeric(iris$Species)
is.numeric(iris$Sepal.Length)
source("~/yanis/cours/Master ssd/M1/Semestre 1/separ/R/data.R")
source("~/yanis/cours/Master ssd/M1/Semestre 1/separ/R/data.R")
library(readr)
read_csv()
read_csv(iris)
read_csv("https://www.dropbox.com/scl/fi/5gdv6tjn0ojbl1q9d354e/membersClean.csv?rlkey=3x35c1wp23774vk0vr0iygp6c&dl=0")
problems(data)
1+1
data<-read_csv("https://www.dropbox.com/scl/fi/5gdv6tjn0ojbl1q9d354e/membersClean.csv?rlkey=3x35c1wp23774vk0vr0iygp6c&dl=0")
problems(data)
url(https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0)
url("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0")
url("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0")
read_file("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0")
browseURL("www.google.fr", browser = getOption("browser"), encodeIfNeeded = FALSE)
s
url
url <- https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0
url <- "https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=0"
download.file(url, destfile = "data.csv")
data
getwd()
library(readr)
data <- read_csv("data.csv")
View(data)
data
df <- read.csv("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=1")
df
head(df)
dim(df)
library(compar)
data
data <- read.csv("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=1")
plot_quali("barplot",data,"peak_name")
plot_quali("barplot",data,"peak_name",type = "ggplot")
plot_quali("barplot",data,"peak_name",type = "plotly")
plot_quali("barplot",data,"citizenship",type = "plotly")
library(RColorBrewer)
palette_couleurs <- brewer.pal(12, "Set3")
plot_quali(plot_type = "barplot",data,"citizenship","sex","oui",palette_couleurs,"classique")
plot_quali(plot_type = "barplot",data,"citizenship","sex","non",palette_couleurs,"classique")
plot_quali(plot_type = "barplot",data,"citizenship","sex","non",palette_couleurs,"ggplot")
plot_quali(plot_type = "barplot",data,"citizenship","sex","non",palette_couleurs,"plotly")
iris
data=data.frame(x=c(TRUE,FALSE))
data
as.factor(data$x)
length(levels(as.factor(data$x)))
#' scinde une data
#' fonction permettant de recuperer une subdata avec seulement le type de variables specifie
#'
#' @param data un dataframe
#' @param type une chaine de caractere specifiant la partie retourne
#'
#' @return
#' @export
#'
#' @examples
scinde <- function(data) {
names_data_quanti <- c()
names_data_quali <- c()
names_data_binaire <- c()
names_data<-names(data)
for(i in 1:length(names_data)){
var <- names_data[i]
if(is.numeric(data[,var])){
names_data_quanti <- append(names_data_quanti,var)
}
else {
names_data_quali <- append(names_data_quali,var)
if(length(levels(as.factor(data[,var])))== 2){
names_data_binaire <- append(names_data_binaire,var)
}
}
}
return(list(quanti = names_data_quanti,quali = names_data_quali,binaire = names_data_binaire))
# if(type == "quanti")
#     names_data_quanti
#   #data[,names_data_quanti]
# else if (type == "quali")
#     names_data_quali
# else if (type == "binaire")
#     names_data_binaire
# else
#   print('le type doit etre:"quanti","quali" ou "binaire')
}
scinde(iris)
maxmod(iris)
library(separ)
maxmod(data$x)
maxmod(data,"species")
maxmod(data,"Species")
maxmod(iris,"species")
maxmod(iris,"Species")
minmod(iris,"Species")
#' scinde une data
#' fonction permettant de recuperer une subdata avec seulement le type de variables specifie
#'
#' @param data un dataframe
#' @param type une chaine de caractere specifiant la partie retourne
#'
#' @return
#' @export
#'
#' @examples
scinde <- function(data,type=NULL) {
names_data_quanti <- c()
names_data_quali <- c()
names_data_binaire <- c()
names_data<-names(data)
for(i in 1:length(names_data)){
var <- names_data[i]
if(is.numeric(data[,var])){
names_data_quanti <- append(names_data_quanti,var)
}
else {
names_data_quali <- append(names_data_quali,var)
if(length(levels(as.factor(data[,var])))== 2){
names_data_binaire <- append(names_data_binaire,var)
}
}
}
res <- list(quanti = names_data_quanti,quali = names_data_quali,binaire = names_data_binaire)
if(type == "quanti")
data[,res$quanti]
else if (type == "quali")
data[,res$quali]
else if (type == "binaire")
data[,res$binaire]
else
return(res)
}
scinde(data)
#' scinde une data
#' fonction permettant de recuperer une subdata avec seulement le type de variables specifie
#'
#' @param data un dataframe
#' @param type une chaine de caractere specifiant la partie retourne
#'
#' @return
#' @export
#'
#' @examples
scinde <- function(data,type=NULL) {
names_data_quanti <- c()
names_data_quali <- c()
names_data_binaire <- c()
names_data<-names(data)
for(i in 1:length(names_data)){
var <- names_data[i]
if(is.numeric(data[,var])){
names_data_quanti <- append(names_data_quanti,var)
}
else {
names_data_quali <- append(names_data_quali,var)
if(length(levels(as.factor(data[,var])))== 2){
names_data_binaire <- append(names_data_binaire,var)
}
}
}
res <- list(quanti = names_data_quanti,quali = names_data_quali,binaire = names_data_binaire)
if(is.null(type))
return(res)
else if(type == "quanti")
data[,res$quanti]
else if (type == "quali")
data[,res$quali]
else if (type == "binaire")
data[,res$binaire]
else
print('le type doit etre:"quanti","quali" ou "binaire')
}
scinde(data)
scinde(iriq)
scinde(iris)
scinde(iris,"quanti")
scinde(iris,"binaire")
scinde(iris,"quali")
library(scindeR)
scindeR::scinde(iris)
?(scindeR)
scindeR()
library(scindeR)
library(scindeR)
help(scindeR)
??scindeR
