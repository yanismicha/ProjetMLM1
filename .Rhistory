)
)
)
install.packages("C:/Users/Alex/Downloads/dashTable_4.7.0.tar.gz", repos = NULL, type = "source")
library(dashTable)
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash_app()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashTable.DataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data", label = "Save to csv")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash_app()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashDataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data", label = "Save to csv")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash_app()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashDataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Définir des callbacks
# Insérez les callbacks nécessaires ici
# Exécuter l'application
app$run_app()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash_app()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashDataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Définir des callbacks
# Insérez les callbacks nécessaires ici
# Exécuter l'application
app$run_app()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash_app()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashDataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Définir des callbacks
# Insérez les callbacks nécessaires ici
app$run_server()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- dash$new()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Créer l'application Dash
app <- Dash$new()
app$layout(
htmlDiv(
dccTabs(
dccTab(label = "DATA", children = list(
htmlH1("Expeditions_Himalayan"),
dashDataTable(id = "dtFinal_data", columns = list(), data = list()),
dccDownload(id = "save_data")
)),
dccTab(label = "Analyse", children = list(
# Insérez le code pour le tabPanel "Résumés statistiques" ici
)),
dccTab(label = "Predictions", children = list(
# Insérez le code pour le tabPanel "KNNPredictions" ici
))
)
)
)
# Définir des callbacks
# Insérez les callbacks nécessaires ici
app$run_server()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
dash_app() %>%
set_layout(
dccInput(id = "text", "sample"),
div("CAPS: ", span(id = "out1")),
div("small: ", span(id = "out2"))
) %>%
add_callback(
list(
output("out1", "children"),
output("out2", "children")
),
input("text", "value"),
function(text) {
list(
toupper(text),
tolower(text)
)
}
) %>%
run_app()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
# Create a Dash app
app <- dash_app()
# Set the layout of the app
app %>% set_layout(
h1('Hello Dash'),
div("Dash: A web application framework for your data."),
dccGraph(
figure = list(
data = list(
list(
x = list(1, 2, 3),
y = list(4, 1, 2),
type = 'bar',
name = 'SF'
),
list(
x = list(1, 2, 3),
y = list(2, 4, 5),
type = 'bar',
name = 'Montr\U{00E9}al'
)
),
layout = list(title = 'Dash Data Visualization')
)
)
)
# Run the app
app %>% run_app()
# Run the app
app %>% run_app()
# Charger les bibliothèques Dash
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashTable)
library(plotly)
df <- read.csv(
file = "https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv",
stringsAsFactor = FALSE,
check.names = FALSE
)
continents <- unique(df$continent)
data_gdp_life_exp_2007 <- lapply(
continents,
function(cont) {
list(
x = df$gdpPercap[df$continent == cont],
y = df$lifeExp[df$continent == cont],
opacity = 0.7,
text = df$country[df$continent == cont],
mode = 'markers',
name = cont,
marker = list(size = 15, line = list(width = 0.5, color = 'white'))
)
}
)
app <- dash_app()
app %>% set_layout(
dccGraph(
id = 'life-exp-vs-gdp',
figure = list(
data =  data_gdp_life_exp_2007,
layout = list(
xaxis = list('type' = 'log', 'title' = 'GDP Per Capita'),
yaxis = list('title' = 'Life Expectancy'),
margin = list('l' = 40, 'b' = 40, 't' = 10, 'r' = 10),
legend = list('x' = 0, 'y' = 1),
hovermode = 'closest'
)
)
)
)
app %>% run_app()
# Run the app
app %>% run_app()
library(dash)
library(dashCoreComponents)
markdown_text <- "
### Dash and Markdown
Dash apps can be written in Markdown.
Dash uses the [CommonMark](http://commonmark.org/)
specification of Markdown.
Check out their [60 Second Markdown Tutorial](http://commonmark.org/help/)
if this is your first introduction to Markdown!
"
dash_app() %>%
set_layout(dccMarkdown(markdown_text)) %>%
run_app()
library(dash)
library(dashCoreComponents)
app <- dash_app()
app %>% set_layout(
div(
html$label('Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = 'MTL'
),
html$label('Multi-Select Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = list('MTL', 'SF'),
multi = TRUE
),
html$label('Radio Items'),
dccRadioItems(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = 'MTL'
),
html$label('Checkboxes'),
dccChecklist(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = list('MTL', 'SF')
),
html$label('Text Input'),
dccInput(value = 'MTL', type = 'text'),
html$label('Slider'),
dccSlider(
min = 0,
max = 9,
marks = c("", "Label 1", 2:5),
value = 5
),
style = list('columnCount' = 2)
)
)
app %>% run_app()
library(dash)
library(dashCoreComponents)
app <- dash_app()
app %>% set_layout(
html$h6("Change the value in the text box to see callbacks in action!"),
div(
"Input: ",
dccInput(id = 'my-input', value = 'initial value', type = 'text')
),
br(),
div(id = 'my-output')
)
app %>% add_callback(
output(id = 'my-output', property = 'children'),
input(id = 'my-input', property = 'value'),
function(input_value) {
sprintf("Output: \"%s\"", input_value)
}
)
app %>% run_app()
library(plotly)
data <- read.csv("https://www.dropbox.com/scl/fi/d3v41yp6x9cxlqvueoet3/membersClean.csv?rlkey=v9xfdgu6oyubjur9rlu6k9eow&dl=1")
fig <- plot_ly(data, x = ~age, color = ~sex, type = "box")
fig
x <- data$year
y <- data$season
fig <- plot_ly(data, x = ~x, color = ~y, type = "box")
fig
library(knitr)
library(corrplot)
library(FactoMineR)
library(factoextra)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE)
station <- read.csv("~/yanis/cours/Master ssd/M1/Semestre 1/Analyse de données/stations.txt", sep="")
station_active <- station[,2:7]
acp <- PCA(station_active,graph=FALSE)
kable(head(station))
eig_val <- get_eigenvalue(acp)
valeur_propre <- eig_val[,1]
nbdim<-sum(valeur_propre) #egale au nombre de dimension de l'acp
#en prenant les 3 premieres composantes , on atteint 88%de la variance expliquée!
var <- get_pca_var(acp)
##coordoonées des variables pour un nuage d epoint
coor<-head(var$coord)
#qualité de représentation
cos2 <- head(var$cos2) # == head(var$coord*var$coord)
# contrib aux composantes principales
contrib <- head(var$contrib) #==var$cos2[,i]*100/sum(var$cos2[,i])
round(eig_val,0)
eig_val
eig_val[3]
eig_val[4]
eig_val[1,]
eig_val[13,]
eig_val[3,]
eig_val[3,][1]
eig_val[3,][3]
eig_val[3,3]
install.packages("C:/Users/Alex/Downloads/shinyWidgets_0.8.0.zip", repos = NULL, type = "win.binary")
install.packages("~/yanis/cours/Master ssd/M1/Semestre 1/package r/compar_0.0.0.9000.tar.gz", repos = NULL, type = "source")
require(compar)
shiny::runApp('yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1/R')
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1")
runApp('R')
if(!require(scindeR)){
install.packages(paste0(path,"packagesR/scindeR_0.0.0.9000.tar.gz"), repos = NULL, type = "source")
}
if(!require(compar)){
install.packages(paste0(path,"packagesR/compar_0.0.0.9000.tar.gz"), repos = NULL, type = "source")
}
if(!require(PredictionPython)){
install.packages(paste0(path,"packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
}
path
path = paste0(here(),"/R/")
if(!require(PredictionPython)){
install.packages(paste0(path,"packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
}
install.packages(paste0(path,"packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
path
path = paste0(here(),"/R/")
path = paste0(here(),"/R/")
path
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1")
path
path = paste0(here(),"/R/")
path
path = paste0(here())
path
path
install.packages(paste0(path,"packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
path = here()
install.packages(paste0(path,"packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
here())
here()
install.packages(paste0(path,"/packagesR/PredictionPython_1.0.tar.gz"), repos = NULL, type = "source")
paste0(path,"/packagesR/PredictionPython_1.0.tar.gz")
julia_command("Tree = JuliaPredict.Tree_Process(JuliaPredict.get_data(),JuliaPredict.get_indiv())")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/Cyclamed")
require(shiny)
runApp("R/Cyclamed.r")
library(leaflet)
dt <- read.csv("https://www.dropbox.com/scl/fi/vd6nhf3e7g14cv9grnif9/tonnage.csv?rlkey=fiw5wpjm2m1ynf9zunydd6cgh&dl=1")
latitude_centre_france <- 46.6031
longitude_centre_france <- 1.8883
dt$longitude <- runif(length(dt$Site), -0.6, 5.5)
dt$latitude <-  runif(length(dt$Site), 44.10, 48.9)
iconCompacteur <- makeIcon(iconUrl = "https://www.dropbox.com/scl/fi/14du9qote5wdk0qyln941/dumpster.png?rlkey=p0u577td7e7jvmmasvsghrh47&dl=1",
iconWidth = c(37.5,61.5))
iconConteneur <- makeIcon(iconUrl = "https://www.dropbox.com/scl/fi/lkwlzxjoo57we1wg4v17l/conteneur.png?rlkey=jhnmuez1rrp4ofrmowbd7h5cp&dl=1",
iconWidth = c(37.5,61.5))
geojson_file <- "R/regions-avec-outre-mer.geojson"
require(sf)
regions <- st_read(geojson_file)
# Créer la carte de la France avec un zoom initial plus large
map_france <- leaflet(dt) %>%
setView(lng = longitude_centre_france, lat = latitude_centre_france, zoom = 5) %>%
addTiles() %>%
addMarkers(lng = ~longitude, lat = ~latitude,
label = ~Site,
popup = paste0(
"<b>", dt$Site,
"</b><br/><img src=",iconConteneur, " width='100px'><br/>",
"Tonnage: ", dt$Tonnages.DIM
),
#icon = iconConten
)%>%
addPolygons(data = regions,
color = "steelblue",
weight = 2,
fillOpacity = 0.4,
stroke = TRUE,popup=~paste(as.character(nom),as.character(code),sep=" : "),
highlightOptions = highlightOptions(color = "black", weight = 3,bringToFront = TRUE)) %>%
addLayersControl(options=layersControlOptions(collapsed = FALSE))
print(map_france)
runApp("../ProjetMLM1/R/app.R")
runApp("R/Cyclamed.r")
names_data <- scinde(dt)
use_virtualenv("../Python/venv")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1")
julia_command("KNN = JuliaPredict.KNN_Process(JuliaPredict.get_data(),JuliaPredict.get_indiv())")
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/AnalyseDeDonnees")
rm(list=ls())
library(AnalyseR)
run_app()
here()
getwd()
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1")
runApp('R')
setwd(path)
r
path = here()
here())
here()
julia <- julia_setup()
julia_install_package("https://github.com/RobinChaussemy/JuliaPredict.jl.git")
julia_library("JuliaPredict")
runApp('R')
runApp('R')
runApp('R')
setwd("C:/Users/Alex/Documents/yanis/cours/Master ssd/M1/Semestre 1/ProjetMLM1")
source("R/guide.r")
rm(list=ls())
runApp('R')
runApp("R/app.R")
runApp("R/app.R")
runApp('R')
runApp("R/AnalyseR.R")
